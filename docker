#!/bin/bash

set -e
# Usage info
show_help() {
cat << EOF
Usage: ./${0##*/} [-h] [-p PATH] [COMMAND]...
Performs the specified COMMAND in the context of a docker project path
which contains a valid Dockerfile as specified using the -p option.

OPTIONS:

    -h          displays this help and exit.
    -p PATH     sets the PATH of the directory which contains the
                Dockerfile.
    -n NAME     sets the NAME of the project which will be used for
                resulting images and containers.

COMMANDS:

    path        echos the project path set via the -p option.
    name        echos the project name set via the -n option.
    reset       resets the project path and name to the current dir.
    build       builds a docker image.
    
EOF
}

# Initialize our own variables:
PROJECT_PATH_FILE="$HOME/.dh-project-path"
if [ -f "$PROJECT_PATH_FILE" ]; then
  read PROJECT_PATH <"$PROJECT_PATH_FILE"
else
  echo "${PWD}" >| "$PROJECT_PATH_FILE"
  read PROJECT_PATH <"$PROJECT_PATH_FILE"
fi

PROJECT_NAME_FILE="$HOME/.dh-project-name"
if [ -f "$PROJECT_NAME_FILE" ]; then
  read PROJECT_NAME <"$PROJECT_NAME_FILE"
else
  BASENAME=`basename $PROJECT_PATH`
  echo "${BASENAME}" >| "$PROJECT_NAME_FILE"
  read PROJECT_NAME <"$PROJECT_NAME_FILE"
fi

OPTIND=1
# Resetting OPTIND is necessary if getopts was used previously in the script.
# It is a good idea to make OPTIND local if you process options in a function.

while getopts p:n:h opt; do
    case $opt in
        h)  show_help
            exit 0
            ;;
        p)  echo "${OPTARG}" >| "$PROJECT_PATH_FILE"
            read PROJECT_PATH <"$PROJECT_PATH_FILE"
            echo "Project path set to $PROJECT_PATH"
            BASENAME=`basename $PROJECT_PATH`
            echo "${BASENAME}" >| "$PROJECT_NAME_FILE" 
            read PROJECT_NAME <"$PROJECT_NAME_FILE"           
            echo "Project name set to $PROJECT_NAME"
            exit 0
            ;;
        n)  echo "${OPTARG}" >| "$PROJECT_NAME_FILE" 
            read PROJECT_NAME <"$PROJECT_NAME_FILE"           
            echo "Project name set to $PROJECT_NAME"
            exit 0
            ;;       
        *)  show_help >&2
            exit 1
            ;;
    esac
done
shift "$((OPTIND-1))" # Shift off the options and optional --.

# Everything that's left in "$@" is a non-option.  In our case, a FILE to process.
# printf 'verbose=<%d>\noutput_file=<%s>\nLeftovers:\n' "$verbose" "$output_file"
# printf '<%s>\n' "$@"

if [[ $@ == "" ]]; then
  show_help >&2
  exit 1
fi

SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
if [[ $@ != "path" ]] && [[ $@ != "name" ]] && [[ $@ != "reset" ]];then
  echo "Project path: $PROJECT_PATH"
  echo "Project name: $PROJECT_NAME"
fi

source "$SCRIPT_DIR/docker-$@"


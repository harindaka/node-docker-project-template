#!/bin/bash

set -e
PROJECT_NAME_FILE="$HOME/.dh-project-name"
read PROJECT_NAME <"$PROJECT_NAME_FILE"

PROJECT_PATH_FILE="$HOME/.dh-project-path"
read PROJECT_PATH <"$PROJECT_PATH_FILE"

PROJECT_IMAGE_NAME="$PROJECT_NAME-image"
PROJECT_SERVICE_NAME="$PROJECT_NAME-service"
PROJECT_SERVICE_PORT=3000

VISUALIZER_SERVICE_NAME="visualizer-service"
VISUALIZER_SERVICE_PORT=8000

PORTAINER_SERVICE_NAME="portainer-service"
PORTAINER_SERVICE_PORT=9000

NGINX_IMAGE_NAME="nginx-image"
NGINX_CONTAINER_NAME="nginx-container"
NGINX_CONTAINER_PORT=8080

NETWORK_NAME="$PROJECT_NAME-network"

PROJECT_GIT_URL=$(cd $PROJECT_PATH; git config --get remote.origin.url)
PROJECT_GIT_BRANCH=$(git rev-parse --abbrev-ref HEAD)


# Install Docker
# https://docs.docker.com/engine/installation/

# Install Docker Machine
# https://docs.docker.com/machine/install-machine/#installing-machine-directly

# Install Virtualbox
# sudo apt install virtualbox

echo ""
echo "#################################################################"
echo "Removing previous docker machines..."
echo "#################################################################"
echo ""
docker-machine rm --force build-server &
docker-machine rm --force manager1 &
docker-machine rm --force manager2 &
docker-machine rm --force worker1 &
docker-machine rm --force worker2 &
docker-machine rm --force reverse-proxy &
wait

echo ""
echo "#################################################################"
echo "Creating build server..."
echo "#################################################################"
echo ""
# https://docs.docker.com/machine/reference/create/
docker-machine create -d virtualbox --virtualbox-memory "512" build-server

# List docker virtual machines
# docker-machine ls

# SSH into build server
# docker-machine ssh build-server

BUILD_SERVER_IP=$(docker-machine ip build-server)

echo ""
echo "#################################################################"
echo "Cloning project into build-server..."
echo "#################################################################"
echo ""
REG_PORT=5000
docker-machine ssh build-server "mkdir $PROJECT_NAME; cd $PROJECT_NAME; git clone $PROJECT_GIT_URL . && git checkout $PROJECT_GIT_BRANCH"
PROJECT_VERSION=$(docker-machine ssh build-server "cd $PROJECT_NAME; git rev-parse --short HEAD")

echo ""
echo "#################################################################"
echo "Building the $PROJECT_SERVICE_NAME docker image..."
echo "#################################################################"
echo ""
LOCAL_PROJECT_IMAGE_NAME="localhost:$REG_PORT/$PROJECT_IMAGE_NAME:$PROJECT_VERSION"
docker-machine ssh build-server "cd $PROJECT_NAME/src; docker build -t $LOCAL_PROJECT_IMAGE_NAME ."

echo ""
echo "#################################################################"
echo "Creating private insecure registry..."
echo "#################################################################"
echo ""
# https://docs.docker.com/registry/deploying/
docker-machine ssh build-server "docker run -d -p $REG_PORT:$REG_PORT --restart=always --name registry registry:2"
REG_IP_PORT="$BUILD_SERVER_IP:$REG_PORT"

echo ""
echo "#################################################################"
echo "Pushing $PROJECT_SERVICE_NAME image to local docker registry..."
echo "#################################################################"
echo ""
docker-machine ssh build-server "docker push $LOCAL_PROJECT_IMAGE_NAME"

echo ""
echo "#################################################################"
echo "Removing local $PROJECT_SERVICE_NAME image as it is no longer necessary..."
echo "#################################################################"
echo ""
docker-machine ssh build-server "docker rmi $LOCAL_PROJECT_IMAGE_NAME"

echo ""
echo "#################################################################"
echo "Creating the swarm worker virtual machines..."
echo "#################################################################"
echo ""
docker-machine create -d virtualbox --virtualbox-memory "512" --engine-insecure-registry $REG_IP_PORT worker1 &
docker-machine create -d virtualbox --virtualbox-memory "512" --engine-insecure-registry $REG_IP_PORT worker2 &

echo ""
echo "#################################################################"
echo "Creating the swarm manager virtual machines..."
echo "#################################################################"
echo ""
docker-machine create -d virtualbox --virtualbox-memory "512" --engine-insecure-registry $REG_IP_PORT manager1 &
docker-machine create -d virtualbox --virtualbox-memory "512" --engine-insecure-registry $REG_IP_PORT manager2 &

echo ""
echo "#################################################################"
echo "Creating the reverse proxy virtual machine..."
echo "#################################################################"
echo ""
docker-machine create -d virtualbox --virtualbox-memory "512" --engine-insecure-registry $REG_IP_PORT reverse-proxy &

wait
MANAGER1_IP=$(docker-machine ip manager1)
MANAGER2_IP=$(docker-machine ip manager1)
REVERSE_PROXY_IP=$(docker-machine ip reverse-proxy)

echo ""
echo "#################################################################"
echo "Initiating the docker swarm..." 
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker swarm init --advertise-addr $MANAGER1_IP"

echo ""
echo "#################################################################"
echo "Adding workers to the swarm (docker swarm join-token worker)..."
echo "#################################################################"
echo ""
ADD_WORKER_CMD=$(docker-machine ssh manager1 "docker swarm join-token worker")
docker-machine ssh worker1 "$ADD_WORKER_CMD"
docker-machine ssh worker2 "$ADD_WORKER_CMD"

echo ""
echo "#################################################################"
echo "Adding manager2 to the swarm (docker swarm join-token manager)..."
echo "#################################################################"
echo ""
ADD_MANAGER_CMD=$(docker-machine ssh manager1 "docker swarm join-token manager")
docker-machine ssh manager2 "$ADD_MANAGER_CMD"

echo ""
echo "#################################################################"
echo "Creating an overlay network from within manager1..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker network create --driver overlay $NETWORK_NAME"

echo ""
echo "#################################################################"
echo "Creating the service $PROJECT_SERVICE_NAME with support for rolling updates..."
echo "#################################################################"
echo ""
# https://docs.docker.com/engine/reference/commandline/service_create/
REMOTE_PROJECT_IMAGE_NAME="$REG_IP_PORT/$PROJECT_IMAGE_NAME:$PROJECT_VERSION"
docker-machine ssh manager1 "docker service create --replicas 4 --name $PROJECT_SERVICE_NAME --network $NETWORK_NAME --update-delay 3s --update-parallelism 2 --publish $PROJECT_SERVICE_PORT:$PROJECT_SERVICE_PORT $REMOTE_PROJECT_IMAGE_NAME"

echo ""
echo "#################################################################"
echo "Creating the service $VISUALIZER_SERVICE_NAME..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker service create --name $VISUALIZER_SERVICE_NAME --mode global --constraint node.role==manager --publish $VISUALIZER_SERVICE_PORT:8080/tcp --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock dockersamples/visualizer"

echo ""
echo "#################################################################"
echo "Creating the service $PORTAINER_SERVICE_NAME..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker service create --name $PORTAINER_SERVICE_NAME --mode global --constraint node.role==manager --publish $PORTAINER_SERVICE_PORT:$PORTAINER_SERVICE_PORT --constraint node.role==manager --mount type=bind,src=/var/run/docker.sock,dst=/var/run/docker.sock portainer/portainer -H unix:///var/run/docker.sock"

echo ""
echo "#################################################################"
echo "Building the $NGINX_IMAGE_NAME docker image..."
echo "#################################################################"
echo ""
LOCAL_NGINX_IMAGE_NAME="localhost:$REG_PORT/$NGINX_IMAGE_NAME:$PROJECT_VERSION"
docker-machine ssh build-server "cd $PROJECT_NAME/nginx; sh nginx.conf.template node-app $MANAGER1_IP $MANAGER2_IP $PROJECT_SERVICE_PORT $VISUALIZER_SERVICE_PORT $PORTAINER_SERVICE_PORT >| nginx.conf; docker build -t $LOCAL_NGINX_IMAGE_NAME ."

echo ""
echo "#################################################################"
echo "Pushing $NGINX_IMAGE_NAME image to local docker registry..."
echo "#################################################################"
echo ""
docker-machine ssh build-server "docker push $LOCAL_NGINX_IMAGE_NAME"

echo ""
echo "#################################################################"
echo "Removing local $NGINX_IMAGE_NAME image as it is no longer necessary..."
echo "#################################################################"
echo ""
docker-machine ssh build-server "docker rmi $LOCAL_NGINX_IMAGE_NAME"

echo ""
echo "#################################################################"
echo "Running the container $NGINX_CONTAINER_NAME as the reverse proxy..."
echo "#################################################################"
echo ""
REMOTE_NGINX_IMAGE_NAME="$REG_IP_PORT/$NGINX_IMAGE_NAME:$PROJECT_VERSION"
docker-machine ssh reverse-proxy "docker run -d -p $NGINX_CONTAINER_PORT:$NGINX_CONTAINER_PORT --name $NGINX_CONTAINER_NAME $REMOTE_NGINX_IMAGE_NAME"

echo ""
echo "#################################################################"
echo "Listing the docker swarm nodes..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker node ls"

echo ""
echo "#################################################################"
echo "Listing the docker swarm networks..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker network ls"

echo ""
echo "#################################################################"
echo "Listing the docker swarm services..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker service ls"

echo ""
echo "#################################################################"
echo "Listing the $PROJECT_SERVICE_NAME tasks..."
echo "#################################################################"
echo ""
docker-machine ssh manager1 "docker service ps $PROJECT_SERVICE_NAME"

echo ""
echo "#################################################################"
echo "Listing service endpoints..."
echo "#################################################################"
echo ""
echo "$PROJECT_SERVICE_NAME @ http://$REVERSE_PROXY_IP:$NGINX_CONTAINER_PORT/services/$PROJECT_NAME"
echo "$VISUALIZER_SERVICE_NAME @ http://$REVERSE_PROXY_IP:$NGINX_CONTAINER_PORT/monitoring/visualizer"
echo "$PORTAINER_SERVICE_NAME @ http://$REVERSE_PROXY_IP:$NGINX_CONTAINER_PORT/monitoring/portainer"
